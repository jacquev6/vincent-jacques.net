(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{266:function(t,e,n){"use strict";n.r(e);var o={"dont-fork-connection-pools":{content:"So, I was trying to find visual duplicates in a bunch of images stored on Amazon S3.\nTo speed things up a bit, I used a multiprocessing.Pool to download images and compute perceptual hashes.\n\nA simple version of the code was looking like this:\n\nTODO\n\nIt's relatively plain.\nComputing the perceptual hashes can be done in parallel in any order, so it's natural to use Pool.imap_unordered.\nThen it's just a mater of finding duplicates using a dict.\nWhat could go wrong? Can you spot it? Would you have spotted it without knowing this article's title?\n\nAnd yet when I ran it I got a bunch of SSL exceptions:\n\nTODO\n\nIt was quite weird because random, transient, SSL errors should be rare.\nAnother set of images to compare was store on Backblaze B2, which has nothing to do with Amazon whatsoever.\nAnd yet, I got SSL errors here as well.\n\nLet's replicate that at a lower level.\nAt the core of multiprocessing, there is fork.\nAt the core of boto3, there is socket.\n\nHere is a little server that sends a sequence of growing integers to its clients:\n\nTODO\n\nAnd here is a client that checks what it receives, implemented using the lower-level primitives:\n\nTODO\n",data:{title:"Don't fork connections pools",published:"2019-07-26T00:00:00.000Z"},isEmpty:!1,excerpt:""}},r={data:function(){var article=o[this.$route.params.slug];return{title:article.data.title,content:article.content}}},l=n(25),component=Object(l.a)(r,(function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("h1",[this._v(this._s(this.title))]),this._v(" "),e("vj-markdown",[this._v(this._s(this.content))])],1)}),[],!1,null,null,null);e.default=component.exports}}]);